// Code generated by qtc from "List.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/vdoctor/List.html:1
package vdoctor

//line views/vdoctor/List.html:1
import (
	"projectforge.dev/projectforge/app"
	"projectforge.dev/projectforge/app/controller/cutil"
	"projectforge.dev/projectforge/app/doctor"
	"projectforge.dev/projectforge/app/util"
	"projectforge.dev/projectforge/views/layout"
)

//line views/vdoctor/List.html:9
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/vdoctor/List.html:9
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/vdoctor/List.html:9
type List struct {
	layout.Basic
	Checks doctor.Checks
}

//line views/vdoctor/List.html:14
func (p *List) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vdoctor/List.html:14
	qw422016.N().S(`
  <div class="card">
    <h3>Doctor</h3>
    <p>The `)
//line views/vdoctor/List.html:17
	qw422016.E().S(util.AppName)
//line views/vdoctor/List.html:17
	qw422016.N().S(` doctor makes sure you're able to run all of the utilities required to work with a `)
//line views/vdoctor/List.html:17
	qw422016.E().S(util.AppName)
//line views/vdoctor/List.html:17
	qw422016.N().S(` project.</p>
    <p>You can see the checks available for your projects in the list below, or you can <a href="/doctor/all">run all checks</a>.</p>
  </div>
  <div class="card">
    <h3>Checks</h3>
    <div class="mt"><a href="/doctor/all"><button>Run All Checks</button></a></div>
    <ul>
`)
//line views/vdoctor/List.html:24
	for _, c := range p.Checks {
//line views/vdoctor/List.html:24
		qw422016.N().S(`        <li>
          <div class="right"><em>`)
//line views/vdoctor/List.html:26
		qw422016.E().S(c.Summary)
//line views/vdoctor/List.html:26
		qw422016.N().S(`</em></div>
          <a href="/doctor/`)
//line views/vdoctor/List.html:27
		qw422016.E().S(c.Key)
//line views/vdoctor/List.html:27
		qw422016.N().S(`">`)
//line views/vdoctor/List.html:27
		qw422016.E().S(c.Title)
//line views/vdoctor/List.html:27
		qw422016.N().S(`</a>
        </li>
`)
//line views/vdoctor/List.html:29
	}
//line views/vdoctor/List.html:29
	qw422016.N().S(`    </ul>
  </div>
`)
//line views/vdoctor/List.html:32
}

//line views/vdoctor/List.html:32
func (p *List) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vdoctor/List.html:32
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vdoctor/List.html:32
	p.StreamBody(qw422016, as, ps)
//line views/vdoctor/List.html:32
	qt422016.ReleaseWriter(qw422016)
//line views/vdoctor/List.html:32
}

//line views/vdoctor/List.html:32
func (p *List) Body(as *app.State, ps *cutil.PageState) string {
//line views/vdoctor/List.html:32
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vdoctor/List.html:32
	p.WriteBody(qb422016, as, ps)
//line views/vdoctor/List.html:32
	qs422016 := string(qb422016.B)
//line views/vdoctor/List.html:32
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vdoctor/List.html:32
	return qs422016
//line views/vdoctor/List.html:32
}
