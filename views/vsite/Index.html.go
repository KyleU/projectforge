// Code generated by qtc from "Index.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/vsite/Index.html:1
package vsite

//line views/vsite/Index.html:1
import (
	"projectforge.dev/projectforge/app"
	"projectforge.dev/projectforge/app/controller/cutil"
	"projectforge.dev/projectforge/app/util"
	"projectforge.dev/projectforge/views/components"
	"projectforge.dev/projectforge/views/layout"
)

//line views/vsite/Index.html:9
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/vsite/Index.html:9
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/vsite/Index.html:9
type Index struct{ layout.Basic }

//line views/vsite/Index.html:11
func (p *Index) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsite/Index.html:11
	qw422016.N().S(`
  <div class="card">
    <h3>`)
//line views/vsite/Index.html:13
	components.StreamSVGIcon(qw422016, `app`, ps)
//line views/vsite/Index.html:13
	qw422016.N().S(` `)
//line views/vsite/Index.html:13
	qw422016.E().S(util.AppName)
//line views/vsite/Index.html:13
	qw422016.N().S(`</h3>

    <div class="mt">
      <a href="/download"><button>`)
//line views/vsite/Index.html:16
	components.StreamSVGButton(qw422016, "download", ps)
//line views/vsite/Index.html:16
	qw422016.N().S(` Download</button></a>
      <a href="https://github.com/kyleu/projectforge"><button>`)
//line views/vsite/Index.html:17
	components.StreamSVGButton(qw422016, "git", ps)
//line views/vsite/Index.html:17
	qw422016.N().S(` Source Code</button></a>
    </div>
    `)
//line views/vsite/Index.html:19
	components.StreamBragApp(qw422016)
//line views/vsite/Index.html:19
	qw422016.N().S(`
  </div>
  <div class="card">
    <h3>Example Applications</h3>
    <ul class="mt">
      <li>
        <strong><a href="https://rituals.dev" target="_blank" rel="noopener noreferrer">Rituals.dev</a></strong> (<em><a href="https://github.com/kyleu/rituals" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        Work with your team to estimate work, track your progress, and gather feedback.
        <ul><li>It's a full websocket-driven rich client application, but also works fine without JavaScript</li></ul>
      </li>
      <li class="mts">
        <strong><a href="https://todo.kyleu.dev" target="_blank" rel="noopener noreferrer">TODO Forge</a></strong> (<em><a href="https://github.com/kyleu/todoforge" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        Manages collections of todo items.
        <ul><li>Almost entirely generated using Project Forge, this is a "stock" application. Provides desktop, mobile, and WASM apps</li></ul>
      </li>
      <li class="mts">
        <strong><a href="https://loadtoad.kyleu.dev" target="_blank" rel="noopener noreferrer">Load Toad</a></strong> (<em><a href="https://github.com/kyleu/loadtoad" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        A tool for uploading HTTP Archives (<code>.har</code> files) and running load tests.
        <ul><li>Also supports client-defined JavaScript, executed in-process on the server</li></ul>
      </li>
      <li class="mts">
        <strong><a href="https://admini.dev" target="_blank" rel="noopener noreferrer">Admini</a></strong> (<em><a href="https://github.com/kyleu/admini" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        A database management application, basically. It does other stuff too.
        <ul><li>This one is weird, it tried to build a user-defined admin app, but it just ended up looking like a 1990's web portal</li></ul>
      </li>
      <li class="mts">
        <strong><a href="https://npn.dev" target="_blank" rel="noopener noreferrer">NPN</a></strong> (<em><a href="https://github.com/kyleu/npn" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        Basically Postman, it helps you explore and test HTTP services with a focus on speed and correctness.
        <ul><li>This uses a Vue.js-based rich client application, and a websocket to handle communication</li></ul>
      </li>
      <li class="mts">
        <strong><a href="https://solitaire.kyleu.dev" target="_blank" rel="noopener noreferrer">Solitaire</a></strong> (<em><a href="https://github.com/kyleu/solitaire" target="_blank" rel="noopener noreferrer">GitHub</a></em>):
        An example game, not really anything right now.
        <ul><li>It mainly exists as a testbed for me, and to show the features of Project Forge projects</li></ul>
      </li>
    </ul>
    <div class="mt"><em>More examples coming soon...</em></div>
  </div>
  `)
//line views/vsite/Index.html:57
	components.StreamBragProject(qw422016)
//line views/vsite/Index.html:57
	qw422016.N().S(`
  <div class="card">
    <h3>Licensing</h3>
    <div class="mt">
      `)
//line views/vsite/Index.html:61
	qw422016.E().S(util.AppName)
//line views/vsite/Index.html:61
	qw422016.N().S(` is <a href="https://choosealicense.com/licenses/mit/">MIT</a> licensed,
      and the modules are <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>.
    </div>
    <div class="mt">Your project is your own, use any license you'd like.</div>
  </div>
`)
//line views/vsite/Index.html:66
}

//line views/vsite/Index.html:66
func (p *Index) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsite/Index.html:66
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vsite/Index.html:66
	p.StreamBody(qw422016, as, ps)
//line views/vsite/Index.html:66
	qt422016.ReleaseWriter(qw422016)
//line views/vsite/Index.html:66
}

//line views/vsite/Index.html:66
func (p *Index) Body(as *app.State, ps *cutil.PageState) string {
//line views/vsite/Index.html:66
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vsite/Index.html:66
	p.WriteBody(qb422016, as, ps)
//line views/vsite/Index.html:66
	qs422016 := string(qb422016.B)
//line views/vsite/Index.html:66
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vsite/Index.html:66
	return qs422016
//line views/vsite/Index.html:66
}
