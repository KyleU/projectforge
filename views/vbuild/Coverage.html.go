// Code generated by qtc from "Coverage.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/vbuild/Coverage.html:1
package vbuild

//line views/vbuild/Coverage.html:1
import (
	"projectforge.dev/projectforge/app"
	"projectforge.dev/projectforge/app/controller/cutil"
	"projectforge.dev/projectforge/app/project"
	"projectforge.dev/projectforge/app/project/action"
	"projectforge.dev/projectforge/views/components"
	"projectforge.dev/projectforge/views/layout"
	"projectforge.dev/projectforge/views/vproject"
)

//line views/vbuild/Coverage.html:11
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/vbuild/Coverage.html:11
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/vbuild/Coverage.html:11
type Coverage struct {
	layout.Basic
	Project  *project.Project
	Result   *action.Result
	Coverage *action.Coverage
}

//line views/vbuild/Coverage.html:18
func (p *Coverage) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:18
	qw422016.N().S(`
  `)
//line views/vbuild/Coverage.html:19
	components.StreamPlotAssets(qw422016)
//line views/vbuild/Coverage.html:19
	qw422016.N().S(`
`)
//line views/vbuild/Coverage.html:20
	prj := p.Project

//line views/vbuild/Coverage.html:20
	qw422016.N().S(`  `)
//line views/vbuild/Coverage.html:21
	vproject.StreamSummary(qw422016, prj, "Code Coverage", nil, &action.TypeBuild, nil, ps)
//line views/vbuild/Coverage.html:21
	qw422016.N().S(`
  `)
//line views/vbuild/Coverage.html:22
	StreamBuildOptions(qw422016, prj.Key, false, ps)
//line views/vbuild/Coverage.html:22
	qw422016.N().S(`

`)
//line views/vbuild/Coverage.html:24
	if p.Result != nil && len(p.Result.Errors) > 0 {
//line views/vbuild/Coverage.html:24
		qw422016.N().S(`  <div class="card">
    <h3>Error</h3>
`)
//line views/vbuild/Coverage.html:27
		for _, e := range p.Result.Errors {
//line views/vbuild/Coverage.html:27
			qw422016.N().S(`    <p class="error">`)
//line views/vbuild/Coverage.html:28
			qw422016.E().S(e)
//line views/vbuild/Coverage.html:28
			qw422016.N().S(`</p>
`)
//line views/vbuild/Coverage.html:29
		}
//line views/vbuild/Coverage.html:29
		qw422016.N().S(`  </div>
`)
//line views/vbuild/Coverage.html:31
	}
//line views/vbuild/Coverage.html:31
	qw422016.N().S(`
  <div class="card">
    <div class="right"><a href="#modal-coverage-`)
//line views/vbuild/Coverage.html:34
	qw422016.E().S(p.Project.Key)
//line views/vbuild/Coverage.html:34
	qw422016.N().S(`"><button type="button">View as Chart</button></a></div>
    <h3>Code Coverage</h3>
    `)
//line views/vbuild/Coverage.html:36
	streamcodeCoverage(qw422016, p.Project.Key, p.Coverage, ps)
//line views/vbuild/Coverage.html:36
	qw422016.N().S(`
  </div>
`)
//line views/vbuild/Coverage.html:38
}

//line views/vbuild/Coverage.html:38
func (p *Coverage) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:38
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vbuild/Coverage.html:38
	p.StreamBody(qw422016, as, ps)
//line views/vbuild/Coverage.html:38
	qt422016.ReleaseWriter(qw422016)
//line views/vbuild/Coverage.html:38
}

//line views/vbuild/Coverage.html:38
func (p *Coverage) Body(as *app.State, ps *cutil.PageState) string {
//line views/vbuild/Coverage.html:38
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vbuild/Coverage.html:38
	p.WriteBody(qb422016, as, ps)
//line views/vbuild/Coverage.html:38
	qs422016 := string(qb422016.B)
//line views/vbuild/Coverage.html:38
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vbuild/Coverage.html:38
	return qs422016
//line views/vbuild/Coverage.html:38
}

//line views/vbuild/Coverage.html:40
type CoverageAll struct {
	layout.Basic
	Projects project.Projects
	Results  map[string]*action.Result
	Coverage map[string]*action.Coverage
}

//line views/vbuild/Coverage.html:47
func (p *CoverageAll) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:47
	qw422016.N().S(`
  `)
//line views/vbuild/Coverage.html:48
	components.StreamPlotAssets(qw422016)
//line views/vbuild/Coverage.html:48
	qw422016.N().S(`
  <div class="card">
    <h3>Code Coverage</h3>
    <div class="mt">
      <ul class="accordion">
`)
//line views/vbuild/Coverage.html:53
	for _, prj := range p.Projects {
//line views/vbuild/Coverage.html:55
		res := p.Results[prj.Key]
		stats := p.Coverage[prj.Key]

//line views/vbuild/Coverage.html:57
		qw422016.N().S(`        <li>
          <input id="accordion-`)
//line views/vbuild/Coverage.html:59
		qw422016.E().S(prj.Key)
//line views/vbuild/Coverage.html:59
		qw422016.N().S(`" type="checkbox" hidden />
          <label for="accordion-`)
//line views/vbuild/Coverage.html:60
		qw422016.E().S(prj.Key)
//line views/vbuild/Coverage.html:60
		qw422016.N().S(`">
            `)
//line views/vbuild/Coverage.html:61
		components.StreamExpandCollapse(qw422016, 3, ps)
//line views/vbuild/Coverage.html:61
		qw422016.N().S(` `)
//line views/vbuild/Coverage.html:61
		components.StreamSVGRef(qw422016, prj.IconSafe(), 16, 16, "icon", ps)
//line views/vbuild/Coverage.html:61
		qw422016.N().S(` `)
//line views/vbuild/Coverage.html:61
		qw422016.E().S(prj.Title())
//line views/vbuild/Coverage.html:61
		qw422016.N().S(`
          </label>
          <div class="bd"><div><div>
            `)
//line views/vbuild/Coverage.html:64
		vproject.StreamSummary(qw422016, prj, "Code Coverage", nil, nil, nil, ps)
//line views/vbuild/Coverage.html:64
		qw422016.N().S(`
`)
//line views/vbuild/Coverage.html:65
		if res != nil && len(res.Errors) > 0 {
//line views/vbuild/Coverage.html:65
			qw422016.N().S(`            <div class="card">
              <h3>Error</h3>
`)
//line views/vbuild/Coverage.html:68
			for _, e := range res.Errors {
//line views/vbuild/Coverage.html:68
				qw422016.N().S(`              <p class="error">`)
//line views/vbuild/Coverage.html:69
				qw422016.E().S(e)
//line views/vbuild/Coverage.html:69
				qw422016.N().S(`</p>
`)
//line views/vbuild/Coverage.html:70
			}
//line views/vbuild/Coverage.html:70
			qw422016.N().S(`            </div>
`)
//line views/vbuild/Coverage.html:72
		}
//line views/vbuild/Coverage.html:72
		qw422016.N().S(`            <div class="card">
              <div class="right"><a href="#modal-coverage-`)
//line views/vbuild/Coverage.html:74
		qw422016.E().S(prj.Key)
//line views/vbuild/Coverage.html:74
		qw422016.N().S(`"><button type="button">View as Chart</button></a></div>
              <h3>Code Coverage</h3>
`)
//line views/vbuild/Coverage.html:76
		if stats == nil {
//line views/vbuild/Coverage.html:76
			qw422016.N().S(`              <em>no stats available</em>
`)
//line views/vbuild/Coverage.html:78
		} else {
//line views/vbuild/Coverage.html:78
			qw422016.N().S(`              `)
//line views/vbuild/Coverage.html:79
			streamcodeCoverage(qw422016, prj.Key, stats, ps)
//line views/vbuild/Coverage.html:79
			qw422016.N().S(`
`)
//line views/vbuild/Coverage.html:80
		}
//line views/vbuild/Coverage.html:80
		qw422016.N().S(`            </div>
          </div></div></div>
        </li>
`)
//line views/vbuild/Coverage.html:84
	}
//line views/vbuild/Coverage.html:84
	qw422016.N().S(`      </ul>
    </div>
  </div>
`)
//line views/vbuild/Coverage.html:88
}

//line views/vbuild/Coverage.html:88
func (p *CoverageAll) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:88
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vbuild/Coverage.html:88
	p.StreamBody(qw422016, as, ps)
//line views/vbuild/Coverage.html:88
	qt422016.ReleaseWriter(qw422016)
//line views/vbuild/Coverage.html:88
}

//line views/vbuild/Coverage.html:88
func (p *CoverageAll) Body(as *app.State, ps *cutil.PageState) string {
//line views/vbuild/Coverage.html:88
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vbuild/Coverage.html:88
	p.WriteBody(qb422016, as, ps)
//line views/vbuild/Coverage.html:88
	qs422016 := string(qb422016.B)
//line views/vbuild/Coverage.html:88
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vbuild/Coverage.html:88
	return qs422016
//line views/vbuild/Coverage.html:88
}

//line views/vbuild/Coverage.html:90
func streamcodeCoverage(qw422016 *qt422016.Writer, key string, cv *action.Coverage, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:90
	qw422016.N().S(`
  <div class="overflow full-width mt">
    <table class="expanded min-200">
      <thead>
        <tr>
          <th>Package</th>
          <th>Amount</th>
        </tr>
      </thead>
      <tbody>
`)
//line views/vbuild/Coverage.html:100
	for _, pkg := range cv.Packages.Keys() {
//line views/vbuild/Coverage.html:100
		qw422016.N().S(`        <tr>
          <td>`)
//line views/vbuild/Coverage.html:102
		qw422016.E().S(pkg)
//line views/vbuild/Coverage.html:102
		qw422016.N().S(`</td>
          <td>`)
//line views/vbuild/Coverage.html:103
		qw422016.E().S(cv.Packages.GetStringOpt(pkg))
//line views/vbuild/Coverage.html:103
		qw422016.N().S(`</td>
        </tr>
`)
//line views/vbuild/Coverage.html:105
	}
//line views/vbuild/Coverage.html:105
	qw422016.N().S(`      </tbody>
    </table>
  </div>
  <div id="modal-coverage-`)
//line views/vbuild/Coverage.html:109
	qw422016.E().S(key)
//line views/vbuild/Coverage.html:109
	qw422016.N().S(`" class="modal" style="display: none;">
    <a class="backdrop" href="#"></a>
    <div class="modal-content" style="width: 100%;">
      <div class="modal-header">
        <a href="#" class="modal-close">Ã—</a>
        <h2>Coverage Chart</h2>
      </div>
      <div class="modal-body">
        <div class="overflow full-width mt">
          `)
//line views/vbuild/Coverage.html:118
	qw422016.N().S(cv.SVG)
//line views/vbuild/Coverage.html:118
	qw422016.N().S(`
        </div>
      </div>
    </div>
  </div>
`)
//line views/vbuild/Coverage.html:123
}

//line views/vbuild/Coverage.html:123
func writecodeCoverage(qq422016 qtio422016.Writer, key string, cv *action.Coverage, ps *cutil.PageState) {
//line views/vbuild/Coverage.html:123
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vbuild/Coverage.html:123
	streamcodeCoverage(qw422016, key, cv, ps)
//line views/vbuild/Coverage.html:123
	qt422016.ReleaseWriter(qw422016)
//line views/vbuild/Coverage.html:123
}

//line views/vbuild/Coverage.html:123
func codeCoverage(key string, cv *action.Coverage, ps *cutil.PageState) string {
//line views/vbuild/Coverage.html:123
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vbuild/Coverage.html:123
	writecodeCoverage(qb422016, key, cv, ps)
//line views/vbuild/Coverage.html:123
	qs422016 := string(qb422016.B)
//line views/vbuild/Coverage.html:123
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vbuild/Coverage.html:123
	return qs422016
//line views/vbuild/Coverage.html:123
}
