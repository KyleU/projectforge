// Code generated by Project Forge, see https://projectforge.dev for details.
package controller

import (
	"github.com/fasthttp/router"
	"github.com/valyala/fasthttp"

	"github.com/kyleu/projectforge/app/telemetry/httpmetrics"
	"github.com/kyleu/projectforge/app/util"
)

//nolint
func AppRoutes() fasthttp.RequestHandler {
	w := fasthttp.CompressHandler
	r := router.New()

	r.GET("/", w(Home))
	r.GET("/about", w(About))
	r.GET("/settings", w(Settings))
	r.GET("/theme", w(ThemeList))
	r.GET("/theme/{key}", w(ThemeEdit))
	r.POST("/theme/{key}", w(ThemeSave))
	r.GET(defaultSearchPath, w(Search))

	r.GET(defaultProfilePath, w(Profile))
	r.POST(defaultProfilePath, w(ProfileSave))
	r.GET("/auth/{key}", w(AuthDetail))
	r.GET("/auth/callback/{key}", w(AuthCallback))
	r.GET("/auth/logout/{key}", w(AuthLogout))

	r.GET("/admin", w(Admin))
	r.GET("/admin/{path:*}", w(Admin))

	// $PF_SECTION_START(routes)$
	r.GET("/doctor", w(Doctor))

	r.GET("/p", w(ProjectList))
	r.GET("/p/{key}", w(ProjectDetail))
	r.GET("/p/{key}/edit", w(ProjectEdit))
	r.POST("/p/{key}/edit", w(ProjectSave))
	r.GET("/p/{key}/fs", w(ProjectFileRoot))
	r.GET("/p/{key}/fs/{path:*}", w(ProjectFile))
	r.GET("/p/{key}/svg", w(SVGList))
	r.GET("/p/{key}/svg/x/add", w(SVGAdd))
	r.GET("/p/{key}/svg/x/build", w(SVGBuild))
	r.GET("/p/{key}/svg/{icon}", w(SVGDetail))
	r.GET("/p/{key}/svg/{icon}/setapp", w(SVGSetApp))
	r.GET("/p/{key}/svg/{icon}/remove", w(SVGRemove))

	r.GET("/run/{act}", w(RunAllActions))
	r.GET("/run/{tgt}/{act}", w(RunAction))

	r.GET("/m", w(ModuleList))
	r.GET("/m/{key}", w(ModuleDetail))
	r.GET("/m/{key}/fs", w(ModuleFileRoot))
	r.GET("/m/{key}/fs/{path:*}", w(ModuleFile))

	r.GET("/test", w(TestList))
	r.GET("/test/{key}", w(TestRun))
	// $PF_SECTION_END(routes)$

	r.GET("/sandbox", w(SandboxList))
	r.GET("/sandbox/{key}", w(SandboxRun))

	r.GET("/favicon.ico", Favicon)
	r.GET("/robots.txt", RobotsTxt)
	r.GET("/assets/{_:*}", Static)

	r.OPTIONS("/", w(Options))
	r.OPTIONS("/{_:*}", w(Options))
	r.NotFound = NotFound

	p := httpmetrics.NewMetrics(util.AppKey)
	return p.WrapHandler(r)
}
