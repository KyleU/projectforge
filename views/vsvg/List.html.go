// Code generated by qtc from "List.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/vsvg/List.html:1
package vsvg

//line views/vsvg/List.html:1
import (
	"strings"

	"projectforge.dev/projectforge/app"
	"projectforge.dev/projectforge/app/controller/cutil"
	"projectforge.dev/projectforge/app/project"
	"projectforge.dev/projectforge/app/project/action"
	"projectforge.dev/projectforge/app/util"
	"projectforge.dev/projectforge/views/components/view"
	"projectforge.dev/projectforge/views/layout"
	"projectforge.dev/projectforge/views/vproject"
)

//line views/vsvg/List.html:14
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/vsvg/List.html:14
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/vsvg/List.html:14
type List struct {
	layout.Basic
	Project  *project.Project
	Keys     []string
	Contents map[string]string
}

//line views/vsvg/List.html:21
func (p *List) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsvg/List.html:21
	qw422016.N().S(`
  `)
//line views/vsvg/List.html:22
	vproject.StreamSummary(qw422016, p.Project, "SVG", nil, &action.TypeSVG, nil, ps)
//line views/vsvg/List.html:22
	qw422016.N().S(`
  <div class="card">
    <h3>SVG icons</h3>
    <div class="mt">
      <a href="/svg/`)
//line views/vsvg/List.html:26
	qw422016.E().S(p.Project.Key)
//line views/vsvg/List.html:26
	qw422016.N().S(`/x/build" title="Writes [svg.go], containing the contents of all SVGs"><button>Rebuild</button></a>
      <a href="/svg/`)
//line views/vsvg/List.html:27
	qw422016.E().S(p.Project.Key)
//line views/vsvg/List.html:27
	qw422016.N().S(`/x/refreshapp" title="Rewrites the application icon and all exported forms"><button>Refresh App Icon</button></a>
    </div>
  </div>
  <div class="card">
    <h3>Add a new icon</h3>
    <p>
      To add an icon to your application, enter a key from `)
//line views/vsvg/List.html:33
	view.StreamURL(qw422016, "https://icons8.com/line-awesome", "Line Awesome", true, ps)
//line views/vsvg/List.html:33
	qw422016.N().S(`.
      Instead of an icon key, you may also provide a URL to any SVG.
      The SVG will be rewritten with attribution.
    </p>
    <form action="/svg/`)
//line views/vsvg/List.html:37
	qw422016.E().S(p.Project.Key)
//line views/vsvg/List.html:37
	qw422016.N().S(`/x/add" method="get">
      <div class="overflow full-width">
        <table>
          <tbody>
            <tr>
              <th class="shrink"><label for="input-src">Source Key</label></th>
              <td><input id="input-src" name="src" value="" /></td>
            </tr>
            <tr>
              <th class="shrink"><label for="input-tgt">Target Key</label></th>
              <td><input id="input-tgt" name="tgt" value="" /></td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="mt">
        <button type="submit">Add/Update SVG</button>
      </div>
    </form>
  </div>
  <div class="card">
    <h3>Current Icons</h3>
    <div class="flex-wrap">
`)
//line views/vsvg/List.html:60
	for _, k := range p.Keys {
//line views/vsvg/List.html:60
		qw422016.N().S(`      <div class="icon-container">
        <a href="/svg/`)
//line views/vsvg/List.html:62
		qw422016.E().S(p.Project.Key)
//line views/vsvg/List.html:62
		qw422016.N().S(`/`)
//line views/vsvg/List.html:62
		qw422016.E().S(k)
//line views/vsvg/List.html:62
		qw422016.N().S(`">
          <div>`)
//line views/vsvg/List.html:63
		qw422016.N().S(strings.ReplaceAll(p.Contents[k], "svg-"+k, "svg-"+k+"_adhoc"))
//line views/vsvg/List.html:63
		qw422016.N().S(`</div>
`)
//line views/vsvg/List.html:64
		x, y := util.StringSplit(k, '@', true)

//line views/vsvg/List.html:65
		if y == "" {
//line views/vsvg/List.html:65
			qw422016.N().S(`          <div>`)
//line views/vsvg/List.html:66
			qw422016.E().S(k)
//line views/vsvg/List.html:66
			qw422016.N().S(`</div>
`)
//line views/vsvg/List.html:67
		} else {
//line views/vsvg/List.html:67
			qw422016.N().S(`          <div>`)
//line views/vsvg/List.html:68
			qw422016.E().S(x)
//line views/vsvg/List.html:68
			qw422016.N().S(`</div>
          <em style="font-size: 75%;">`)
//line views/vsvg/List.html:69
			qw422016.E().S(y)
//line views/vsvg/List.html:69
			qw422016.N().S(`</em>
`)
//line views/vsvg/List.html:70
		}
//line views/vsvg/List.html:70
		qw422016.N().S(`        </a>
      </div>
`)
//line views/vsvg/List.html:73
	}
//line views/vsvg/List.html:73
	qw422016.N().S(`    </div>
  </div>
`)
//line views/vsvg/List.html:76
}

//line views/vsvg/List.html:76
func (p *List) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsvg/List.html:76
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vsvg/List.html:76
	p.StreamBody(qw422016, as, ps)
//line views/vsvg/List.html:76
	qt422016.ReleaseWriter(qw422016)
//line views/vsvg/List.html:76
}

//line views/vsvg/List.html:76
func (p *List) Body(as *app.State, ps *cutil.PageState) string {
//line views/vsvg/List.html:76
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vsvg/List.html:76
	p.WriteBody(qb422016, as, ps)
//line views/vsvg/List.html:76
	qs422016 := string(qb422016.B)
//line views/vsvg/List.html:76
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vsvg/List.html:76
	return qs422016
//line views/vsvg/List.html:76
}
