// Code generated by qtc from "Index.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// <!-- $PF_IGNORE$ -->

//line views/vsite/Index.html:2
package vsite

//line views/vsite/Index.html:2
import (
	"projectforge.dev/projectforge/app"
	"projectforge.dev/projectforge/app/controller/cutil"
	"projectforge.dev/projectforge/app/util"
	"projectforge.dev/projectforge/views/components"
	"projectforge.dev/projectforge/views/layout"
)

//line views/vsite/Index.html:10
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/vsite/Index.html:10
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/vsite/Index.html:10
type Index struct{ layout.Basic }

//line views/vsite/Index.html:12
func (p *Index) StreamBody(qw422016 *qt422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsite/Index.html:12
	qw422016.N().S(`
  <div class="card">
    <h3>`)
//line views/vsite/Index.html:14
	components.StreamSVGRefIcon(qw422016, `app`, ps)
//line views/vsite/Index.html:14
	qw422016.E().S(util.AppName)
//line views/vsite/Index.html:14
	qw422016.N().S(`</h3>
    <div class="mt">
      <div>Project Forge manages web projects written in the Go language.</div>
      <em>Using code generation, the latest technology, and a strong standard library, Project Forge will manage your project's code, assets, UI and UX.</em>
    </div>
    <p>
      <a href="/download"><button>Download</button></a>
      <a href="https://github.com/kyleu/projectforge"><button>Source Code</button></a>
    </p>
  </div>
  <div class="card">
    <h3>A project managed by Project Forge...</h3>
    <ul class="mt">
      <li>Has a beautiful and fast HTML UI, no JavaScript required</li>
      <li>Optimizes for speed and developer experience, sub-second turnaround times</li>
      <li>Builds in seconds, live-reloads in dev mode when code or templates change</li>
      <li>Builds native apps for dozens of platforms; mobile, desktop, weird architectures, macOS universal apps</li>
      <li>Produces a small self-contained binary, includes full REST server and command line interface</li>
      <li>Optionally supports OAuth with dozens of providers, full theme and stateless session support</li>
      <li>Provides a type-safe API for working with PostgreSQL, MySQL, and SQLite databases (or no database at all)</li>
      <li>Uses ESBuild for a TypeScript client with progressive enhancement, SVGs, and modern CSS</li>
    </ul>
  </div>
  <div class="card">
    <h3>Licensing</h3>
    <div class="mt">
      `)
//line views/vsite/Index.html:40
	qw422016.E().S(util.AppName)
//line views/vsite/Index.html:40
	qw422016.N().S(` is <a href="https://choosealicense.com/licenses/mit/">MIT</a> licensed,
      and the modules are <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>.
    </div>
    <div class="mt">Your project is your own, use any license you'd like.</div>
  </div>
`)
//line views/vsite/Index.html:45
}

//line views/vsite/Index.html:45
func (p *Index) WriteBody(qq422016 qtio422016.Writer, as *app.State, ps *cutil.PageState) {
//line views/vsite/Index.html:45
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/vsite/Index.html:45
	p.StreamBody(qw422016, as, ps)
//line views/vsite/Index.html:45
	qt422016.ReleaseWriter(qw422016)
//line views/vsite/Index.html:45
}

//line views/vsite/Index.html:45
func (p *Index) Body(as *app.State, ps *cutil.PageState) string {
//line views/vsite/Index.html:45
	qb422016 := qt422016.AcquireByteBuffer()
//line views/vsite/Index.html:45
	p.WriteBody(qb422016, as, ps)
//line views/vsite/Index.html:45
	qs422016 := string(qb422016.B)
//line views/vsite/Index.html:45
	qt422016.ReleaseByteBuffer(qb422016)
//line views/vsite/Index.html:45
	return qs422016
//line views/vsite/Index.html:45
}
